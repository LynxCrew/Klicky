[gcode_macro ADJUST_Z_TILT]
gcode:
  {% set FORCE = params.FORCE|default('TRUE')|boolean %}
  {% set FORCE_HOME = params.FORCE_HOME|default('FALSE')|boolean %}
  {% set PARK = params.PARK|default('TRUE')|boolean %}
  {% set STATUS_Z_TILT = printer['gcode_macro _HOMING_STATUS'].z_tilt|boolean %}

  {% if FORCE or not STATUS_Z_TILT %}
    LOCK_DOCKING

    {% if FORCE_HOME %}
      G28 P0
    {% else %}
      G28 X0 Y0 Z0 P0
    {% endif %}

    Z_TILT_ADJUST {rawparams}

    UNLOCK_DOCKING

    {% if PARK %}
      G28 Z
    {% else %}
      G28 Z P0
    {% endif %}
  {% endif %}

[gcode_macro G32]
gcode:
  ADJUST_Z_TILT
    
  
[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_BASE
gcode:
  {% set ACTUAL_TEMP = printer.heater_bed.temperature %}
  {% set TARGET_TEMP = printer.heater_bed.target %}

  {% set PARK = params.PARK|default(1)|boolean %}

  # {% if TARGET_TEMP > printer['gcode_macro _PROBE_VARIABLES'].max_bed_temp %}
  #   SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={printer['gcode_macro _PROBE_VARIABLES'].max_bed_temp}
  #   TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={printer['gcode_macro _PROBE_VARIABLES'].max_bed_temp + 1}
  # {% else %}
  #   {% if ACTUAL_TEMP > printer['gcode_macro _PROBE_VARIABLES'].max_bed_temp %}
  #     TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={printer['gcode_macro _PROBE_VARIABLES'].max_bed_temp + 1}
  #   {% endif %}
  # {% endif %}

  _SAVE_CURRENT_MESH
  BED_MESH_CLEAR INTELLIGENT=1
    
  ATTACH_PROBE RETURN_TO_POSITION=FALSE

  G0 X{printer["gcode_macro _PROBE_VARIABLES"].pos[0]} Y{printer["gcode_macro _PROBE_VARIABLES"].pos[1]} F5000

  _CHECK_PROBE state=attached

  PROBE_BASE

  Z_TILT_ADJUST_BASE {rawparams}

  SET_GCODE_VARIABLE MACRO=_HOMING_STATUS VARIABLE=z_tilt VALUE=1

  DOCK_PROBE RETURN_TO_POSITION=FALSE

  {% if not printer["gcode_macro _KLICKY_DATABASE"].docking_locked and printer["gcode_macro PARK"] is defined and PARK %}
    PARK
  {% endif %}

  # {% if TARGET_TEMP > printer['gcode_macro _PROBE_VARIABLES'].max_bed_temp %}
  #   SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={TARGET_TEMP}
  #   TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={ACTUAL_TEMP - 5}
  # {% endif %}
      
  _LOAD_CACHED_MESH
